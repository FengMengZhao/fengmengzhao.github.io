---
layout: post
title: 'Docker指南-2021【译】'
subtitle: '从基本的概念到Docker中级，带你从零到一学习Docker。通过本指南你应该学习到：几乎基于所有平台的容器化;上传一个自定义的Docker镜像(Image)到在线仓库(registry);使用docker-compose协作多个容器。'
background: '/img/posts/docker-handbook-2021.jpg'
comment: false
---

# 目录

- [0. 前言](#0)
- [1. 准备](#1)
- [2. 容器化(Containerization))和Docker简介](#2)
    - [2.1 ](#2.1)

---

<h2 id="0">0. 前言</h2>

容器化是一个相当古老的技术，2013年Docker Engine的出现让一个应用容器化变得更加简单。

根据Stack Overflow开发者调查，2020年Docker是最被需要、最受喜爱和最流行的平台。

Docker技术如此流行，似乎我们不得不学习它。因此，本指南囊括有从基本到中级的容器化技术。通过本指南你应该学习到：几乎基于所有平台的容器化;上传一个自定义的Docker镜像(Image)到在线仓库(registry);使用docker-compose协作多个容器。

---

<h2 id="1">1. 索引剖析</h2>

- 熟悉Linux命令行操作
- 熟悉JavaScript语言(后续的项目中使用到了JavaScript)

<h2 id="2">2. 容器化(Containerization))和Docker简介</h2>

IBM指出：容器化技术就是将软件代码和其所有的依赖打包或者封装，使其统一能够在任何平台上持续运行的技术。

换句话说，容器技术就是能够让你把软件和其依赖打包在一个自包含的包中，这样软件运行的时候就不必解决启动依赖的一些问题。

让我们考虑一个实际的生活场景，假设你开发了一个神奇的图书管理系统，你也可以向你的朋友提供数据的借阅功能。如果把这个系统的依赖都列出来，可能是这样的：

- Node.js
- Express.js
- SQLite3

理论上来讲，应该就是这些依赖了，但是实际上并不止这些。我们知道`Node.js`使用一个叫做`node-gyp`的构建工具用来构建本地插件，并且根据官方的安装文档，这个构建工具需要`Python`2或者3和一个正确的c/c++编译器。

这样说来，最终的依赖列表可能是这样的：

- Node.js
- Express.js
- SQLite3
- Pytho2 or 3
- c/c++ 编译器

在任何平台安装`Python`2或者3都比较简单。在Linux平台上安装c/c++编译器比较容易，但是在Windows和Mac系统上安装就是一个痛苦的过程了。

在Windows中，C++编译器有超过1G的大小，需要花费不少的时间安装。在Mac系统中，你需要安装`Xcode`或者体量小的`Xcode`命令行工具。

尽管你安装好了依赖，在OS更新后，你的依赖可能被破坏。事实上，在macOS系统上，这个问题如此常见，以至于在官方的仓库中记录着安装日志。

让我们假设你克服了重重困难安装好了开发应用的所有依赖，你认为现在就万事大吉了吗？还没有。

如果你的同事使用的Windows系统开发，而你使用的是macOS系统，你需要考虑两个操作系统对文件路径的差异处理。再或者说Nginx并没有很好的针对Windows系统做优化。一些技术例如Redis甚至没有Windows系统的预编译包。

<h3 id="2.1">2.1 </h3>

---
